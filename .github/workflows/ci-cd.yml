name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # 1. Check out the repository code
      - name: Check out code
        uses: actions/checkout@v3

      # 2. Set up Node
      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # 3. Install dependencies
      - name: Install dependencies
        run: npm install

      # 4. Run tests
      - name: Run tests
        run: npm run test:ci

      # 5. Build the Next.js app
      - name: Build
        run: npm run build

  deploy:
    # This job only runs if the build-and-test job succeeds
    needs: [build-and-test]
    runs-on: ubuntu-latest

    # Optionally ensure that we only deploy from "main" (not PRs, etc.)
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Deploy using SSH
      - name: Deploy to Linux server via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Move to the application directory
            cd /var/www/task-manager/frontend

            # Pull the latest code
            git pull origin main

            # Move to the application directory
            cd /var/www/task-manager/backend

            # Pull the latest code
            git pull origin master

            # Move to the application directory
            cd /var/www/task-manager

            # Stop and remove running containers
            docker-compose down

            # Remove old unused images, volumes, and containers to free up space
            docker image prune -af

            # Build the new images
            docker-compose build --no-cache

            # Start fresh containers with the new build
            docker-compose up -d

            echo "âœ… Deployment complete!"
